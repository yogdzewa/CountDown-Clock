C51 COMPILER V9.60.0.0   HELP_FUNC                                                         07/03/2022 22:11:30 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE HELP_FUNC
OBJECT MODULE PLACED IN .\output\help_func.obj
COMPILER INVOKED BY: E:\Keil_v5\C51\BIN\C51.EXE source\help_func.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\inc) DEBUG OBJECTEX
                    -TEND PRINT(.\list\help_func.lst) TABS(2) OBJECT(.\output\help_func.obj)

line level    source

   1          #include "help_func.h"
   2          #include "callback.h"
   3          // used for reset value
   4          XDATA uchar TIME_RELD_H;
   5          XDATA uchar TIME_RELD_M;
   6          XDATA uchar TIME_RELD_S;
   7          XDATA uchar TIME_REST_M;
   8          // used for countdown process
   9          // uchar TIME_LIMIT_hour = 0;
  10          // uchar TIME_LIMIT_minute = 50;
  11          // uchar TIME_LIMIT_second = 21;
  12          int TIME_LIMIT_ALLSEC;
  13          // tmp var and macros
  14          int diff;
  15          int diff_t;
  16          // #define CLOCK_SAME_COND(ele) (base.##ele == cur.##ele)
  17          // #define CLKs_DIFF(ele) ((int)cur.##ele - (int)base.##ele)
  18          // #define CLK_LIMIT_DIFF(ele) (TIME_LIMIT_##ele - time_diff_tmp.##ele)
  19          // #define CNT_DOWN(ele, prv) ((CLK_LIMIT_DIFF(ele) < (uchar)60) ? CLK_LIMIT_DIFF(ele) : (time_diff_tmp.##
             -prv--, ((uchar)60 + CLK_LIMIT_DIFF(ele))))
  20          
  21          void time_diff_count_down()
  22          {
  23   1          diff = clock_cur_totalsec - clock_base_totalsec;
  24   1          diff_t = TIME_LIMIT_ALLSEC - diff;
  25   1          if (diff_t < 0)
  26   1          {
  27   2              diff_t = (60 + diff_t) % 60;
  28   2              TIME_LIMIT_ALLSEC = diff_t + diff;
  29   2          }
  30   1          time_diff_tmp.hour = diff_t / 3600;
  31   1          time_diff_tmp.minute = diff_t % 3600 / 60;
  32   1          time_diff_tmp.second = diff_t % 60;
  33   1      }
  34          
  35          void delay_ms(uint n)
  36          {
  37   1          while (n)
  38   1          {
  39   2              uchar i, j;
  40   2              i = 11;
  41   2              j = 190;
  42   2              do
  43   2              {
  44   3                  while (--j)
  45   3                      ;
  46   3              } while (--i);
  47   2              n--;
  48   2          }
  49   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    142    ----
C51 COMPILER V9.60.0.0   HELP_FUNC                                                         07/03/2022 22:11:30 PAGE 2   

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
